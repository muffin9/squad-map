# https://kukim.tistory.com/144

name: Front deploy workflow

on:  # workflow 실행 조건
  workflow_dispatch:
#   push:
#     branches:
#       - main # 메인 브랜치가 푸쉬된 경우


jobs: # job 설정
  build: # job id
    name: react build & deploy
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./FE 
        
    steps: 
      - name: checkout Github Action
        uses: actions/checkout@v3 
        
      - name : Create env file 
        run: |
          touch .env.production
          touch .env.common
          echo "${{ secrets.FE_ENV_PROD }}" >> .env.production
          echo "${{ secrets.FE_ENV_COMMON }}" >> .env.common

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
              ${{ runner.os }}-yarn-
      
      - name: install npm dependencies
        run: npm install
      - name: react build
        run: yarn build

      - name: Configure AWS credentials 
        uses: aws-actions/configure-aws-credentials@v1 
        with: 
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY_ID }} 
          aws-region: ap-northeast-2

      - name: Upload to S3
        env:
          BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME}}
        run: |
          aws s3 sync \
            ./build s3://$BUCKET_NAME

      # 업로드한 s3 파일을 각 CDN 캐시 무효화하여 리프레시 하기
      - name: CloudFront Invalidation
        env:
          CLOUD_FRONT_ID: ${{ secrets.AWS_CLOUDFRONT_ID}}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUD_FRONT_ID --paths /*
